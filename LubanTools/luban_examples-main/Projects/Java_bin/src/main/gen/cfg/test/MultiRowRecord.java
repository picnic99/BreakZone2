
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg.test;

import luban.*;


public final class MultiRowRecord extends AbstractBean {
    public MultiRowRecord(ByteBuf _buf) { 
        id = _buf.readInt();
        name = _buf.readString();
        {int n = Math.min(_buf.readSize(), _buf.size());oneRows = new java.util.ArrayList<cfg.test.MultiRowType1>(n);for(int i = 0 ; i < n ; i++) { cfg.test.MultiRowType1 _e;  _e = cfg.test.MultiRowType1.deserialize(_buf); oneRows.add(_e);}}
        {int n = Math.min(_buf.readSize(), _buf.size());multiRows1 = new java.util.ArrayList<cfg.test.MultiRowType1>(n);for(int i = 0 ; i < n ; i++) { cfg.test.MultiRowType1 _e;  _e = cfg.test.MultiRowType1.deserialize(_buf); multiRows1.add(_e);}}
        {int n = Math.min(_buf.readSize(), _buf.size());multiRows2 = new cfg.test.MultiRowType1[n];for(int i = 0 ; i < n ; i++) { cfg.test.MultiRowType1 _e;_e = cfg.test.MultiRowType1.deserialize(_buf); multiRows2[i] = _e;}}
        {int n = Math.min(_buf.readSize(), _buf.size());multiRows4 = new java.util.HashMap<Integer, cfg.test.MultiRowType2>(n * 3 / 2);for(int i = 0 ; i < n ; i++) { Integer _k;  _k = _buf.readInt(); cfg.test.MultiRowType2 _v;  _v = cfg.test.MultiRowType2.deserialize(_buf);     multiRows4.put(_k, _v);}}
        {int n = Math.min(_buf.readSize(), _buf.size());multiRows5 = new java.util.ArrayList<cfg.test.MultiRowType3>(n);for(int i = 0 ; i < n ; i++) { cfg.test.MultiRowType3 _e;  _e = cfg.test.MultiRowType3.deserialize(_buf); multiRows5.add(_e);}}
        {int n = Math.min(_buf.readSize(), _buf.size());multiRows6 = new java.util.HashMap<Integer, cfg.test.MultiRowType2>(n * 3 / 2);for(int i = 0 ; i < n ; i++) { Integer _k;  _k = _buf.readInt(); cfg.test.MultiRowType2 _v;  _v = cfg.test.MultiRowType2.deserialize(_buf);     multiRows6.put(_k, _v);}}
        {int n = Math.min(_buf.readSize(), _buf.size());multiRows7 = new java.util.HashMap<Integer, Integer>(n * 3 / 2);for(int i = 0 ; i < n ; i++) { Integer _k;  _k = _buf.readInt(); Integer _v;  _v = _buf.readInt();     multiRows7.put(_k, _v);}}
    }

    public static MultiRowRecord deserialize(ByteBuf _buf) {
            return new cfg.test.MultiRowRecord(_buf);
    }

    public final int id;
    public final String name;
    public final java.util.ArrayList<cfg.test.MultiRowType1> oneRows;
    public final java.util.ArrayList<cfg.test.MultiRowType1> multiRows1;
    public final cfg.test.MultiRowType1[] multiRows2;
    public final java.util.HashMap<Integer, cfg.test.MultiRowType2> multiRows4;
    public final java.util.ArrayList<cfg.test.MultiRowType3> multiRows5;
    public final java.util.HashMap<Integer, cfg.test.MultiRowType2> multiRows6;
    public final java.util.HashMap<Integer, Integer> multiRows7;

    public static final int __ID__ = -501249394;
    
    @Override
    public int getTypeId() { return __ID__; }

    @Override
    public String toString() {
        return "{ "
        + "(format_field_name __code_style field.name):" + id + ","
        + "(format_field_name __code_style field.name):" + name + ","
        + "(format_field_name __code_style field.name):" + oneRows + ","
        + "(format_field_name __code_style field.name):" + multiRows1 + ","
        + "(format_field_name __code_style field.name):" + multiRows2 + ","
        + "(format_field_name __code_style field.name):" + multiRows4 + ","
        + "(format_field_name __code_style field.name):" + multiRows5 + ","
        + "(format_field_name __code_style field.name):" + multiRows6 + ","
        + "(format_field_name __code_style field.name):" + multiRows7 + ","
        + "}";
    }
}

