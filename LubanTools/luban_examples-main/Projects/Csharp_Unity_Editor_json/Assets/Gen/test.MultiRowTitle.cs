
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using SimpleJSON;
using Luban;

namespace editor.cfg.test
{

public sealed class MultiRowTitle :  Luban.EditorBeanBase 
{
    public MultiRowTitle()
    {
            name = "";
            x1 = new test.H1();
            x2 = new System.Collections.Generic.List<test.H2>();
            x3 = System.Array.Empty<test.H2>();
            x4 = System.Array.Empty<test.H2>();
    }

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        { 
            var _fieldJson = _json["id"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  id = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["name"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  name = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["x1"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsObject) { throw new SerializationException(); }  x1 = test.H1.LoadJsonH1(_fieldJson);
            }
        }
        
        { 
            var _fieldJson = _json["x2_0"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsObject) { throw new SerializationException(); }  x20 = test.H2.LoadJsonH2(_fieldJson);
            }
        }
        
        { 
            var _fieldJson = _json["x2"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } x2 = new System.Collections.Generic.List<test.H2>(); foreach(JSONNode __e in _fieldJson.Children) { test.H2 __v;  if(!__e.IsObject) { throw new SerializationException(); }  __v = test.H2.LoadJsonH2(__e);  x2.Add(__v); }  
            }
        }
        
        { 
            var _fieldJson = _json["x3"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } int _n = _fieldJson.Count; x3 = new test.H2[_n]; int _index=0; foreach(SimpleJSON.JSONNode __e in _fieldJson.Children) { test.H2 __v;  if(!__e.IsObject) { throw new SerializationException(); }  __v = test.H2.LoadJsonH2(__e);  x3[_index++] = __v; }  
            }
        }
        
        { 
            var _fieldJson = _json["x4"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } int _n = _fieldJson.Count; x4 = new test.H2[_n]; int _index=0; foreach(SimpleJSON.JSONNode __e in _fieldJson.Children) { test.H2 __v;  if(!__e.IsObject) { throw new SerializationException(); }  __v = test.H2.LoadJsonH2(__e);  x4[_index++] = __v; }  
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {
        {
            _json["id"] = new JSONNumber(id);
        }
        {

            if (name == null) { throw new System.ArgumentNullException(); }
            _json["name"] = new JSONString(name);
        }
        {

            if (x1 == null) { throw new System.ArgumentNullException(); }
            { var __bjson = new JSONObject();  test.H1.SaveJsonH1(x1, __bjson); _json["x1"] = __bjson; }
        }

        if (x20 != null)
        {
            { var __bjson = new JSONObject();  test.H2.SaveJsonH2(x20, __bjson); _json["x2_0"] = __bjson; }
        }
        {

            if (x2 == null) { throw new System.ArgumentNullException(); }
            { var __cjson = new JSONArray(); foreach(var _e in x2) { { var __bjson = new JSONObject();  test.H2.SaveJsonH2(_e, __bjson); __cjson["null"] = __bjson; } } _json["x2"] = __cjson; }
        }
        {

            if (x3 == null) { throw new System.ArgumentNullException(); }
            { var __cjson = new JSONArray(); foreach(var _e in x3) { { var __bjson = new JSONObject();  test.H2.SaveJsonH2(_e, __bjson); __cjson["null"] = __bjson; } } _json["x3"] = __cjson; }
        }
        {

            if (x4 == null) { throw new System.ArgumentNullException(); }
            { var __cjson = new JSONArray(); foreach(var _e in x4) { { var __bjson = new JSONObject();  test.H2.SaveJsonH2(_e, __bjson); __cjson["null"] = __bjson; } } _json["x4"] = __cjson; }
        }
    }

    public static MultiRowTitle LoadJsonMultiRowTitle(SimpleJSON.JSONNode _json)
    {
        MultiRowTitle obj = new test.MultiRowTitle();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonMultiRowTitle(MultiRowTitle _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    public int id;

    public string name;

    public test.H1 x1;

    public test.H2 x20;

    public System.Collections.Generic.List<test.H2> x2;

    public test.H2[] x3;

    public test.H2[] x4;

}

}
