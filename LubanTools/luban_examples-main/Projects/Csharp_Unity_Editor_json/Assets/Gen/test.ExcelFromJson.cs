
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using SimpleJSON;
using Luban;

namespace editor.cfg.test
{

public sealed class ExcelFromJson :  Luban.EditorBeanBase 
{
    public ExcelFromJson()
    {
            s1 = "";
            s2 = "";
            t1 = "1970-01-01 00:00:00";
            x12 = new test.DemoType1();
            x13 = test.DemoEnum.NONE;
            k1 = System.Array.Empty<int>();
            k8 = new System.Collections.Generic.Dictionary<int,int>();
            k9 = new System.Collections.Generic.List<test.DemoE2>();
            k15 = System.Array.Empty<test.DemoDynamic>();
    }

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        { 
            var _fieldJson = _json["x4"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  x4 = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["x1"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsBoolean) { throw new SerializationException(); }  x1 = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["x5"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  x5 = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["x6"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  x6 = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["s1"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  s1 = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["s2"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  s2 = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["t1"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  t1 = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["x12"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsObject) { throw new SerializationException(); }  x12 = test.DemoType1.LoadJsonDemoType1(_fieldJson);
            }
        }
        
        { 
            var _fieldJson = _json["x13"];
            if (_fieldJson != null)
            {
                if(_fieldJson.IsString) { x13 = (test.DemoEnum)System.Enum.Parse(typeof(test.DemoEnum), _fieldJson); } else if(_fieldJson.IsNumber) { x13 = (test.DemoEnum)(int)_fieldJson; } else { throw new SerializationException(); }  
            }
        }
        
        { 
            var _fieldJson = _json["x14"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsObject) { throw new SerializationException(); }  x14 = test.DemoDynamic.LoadJsonDemoDynamic(_fieldJson);
            }
        }
        
        { 
            var _fieldJson = _json["k1"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } int _n = _fieldJson.Count; k1 = new int[_n]; int _index=0; foreach(SimpleJSON.JSONNode __e in _fieldJson.Children) { int __v;  if(!__e.IsNumber) { throw new SerializationException(); }  __v = __e;  k1[_index++] = __v; }  
            }
        }
        
        { 
            var _fieldJson = _json["k8"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } k8 = new System.Collections.Generic.Dictionary<int, int>(); foreach(JSONNode __e in _fieldJson.Children) { int __k;  if(!__e[0].IsNumber) { throw new SerializationException(); }  __k = __e[0]; int __v;  if(!__e[1].IsNumber) { throw new SerializationException(); }  __v = __e[1];  k8.Add(__k, __v); }  
            }
        }
        
        { 
            var _fieldJson = _json["k9"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } k9 = new System.Collections.Generic.List<test.DemoE2>(); foreach(JSONNode __e in _fieldJson.Children) { test.DemoE2 __v;  if(!__e.IsObject) { throw new SerializationException(); }  __v = test.DemoE2.LoadJsonDemoE2(__e);  k9.Add(__v); }  
            }
        }
        
        { 
            var _fieldJson = _json["k15"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } int _n = _fieldJson.Count; k15 = new test.DemoDynamic[_n]; int _index=0; foreach(SimpleJSON.JSONNode __e in _fieldJson.Children) { test.DemoDynamic __v;  if(!__e.IsObject) { throw new SerializationException(); }  __v = test.DemoDynamic.LoadJsonDemoDynamic(__e);  k15[_index++] = __v; }  
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {
        {
            _json["x4"] = new JSONNumber(x4);
        }
        {
            _json["x1"] = new JSONBool(x1);
        }
        {
            _json["x5"] = new JSONNumber(x5);
        }
        {
            _json["x6"] = new JSONNumber(x6);
        }
        {

            if (s1 == null) { throw new System.ArgumentNullException(); }
            _json["s1"] = new JSONString(s1);
        }
        {

            if (s2 == null) { throw new System.ArgumentNullException(); }
            _json["s2"] = new JSONString(s2);
        }
        {
            _json["t1"] = new JSONString(t1);
        }
        {

            if (x12 == null) { throw new System.ArgumentNullException(); }
            { var __bjson = new JSONObject();  test.DemoType1.SaveJsonDemoType1(x12, __bjson); _json["x12"] = __bjson; }
        }
        {
            _json["x13"] = new JSONNumber((int)x13);
        }
        {

            if (x14 == null) { throw new System.ArgumentNullException(); }
            { var __bjson = new JSONObject();  test.DemoDynamic.SaveJsonDemoDynamic(x14, __bjson); _json["x14"] = __bjson; }
        }
        {

            if (k1 == null) { throw new System.ArgumentNullException(); }
            { var __cjson = new JSONArray(); foreach(var _e in k1) { __cjson["null"] = new JSONNumber(_e); } _json["k1"] = __cjson; }
        }
        {

            if (k8 == null) { throw new System.ArgumentNullException(); }
            { var __cjson = new JSONArray(); foreach(var _e in k8) { var __entry = new JSONArray(); __cjson[null] = __entry; __entry["null"] = new JSONNumber(_e.Key); __entry["null"] = new JSONNumber(_e.Value); } _json["k8"] = __cjson; }
        }
        {

            if (k9 == null) { throw new System.ArgumentNullException(); }
            { var __cjson = new JSONArray(); foreach(var _e in k9) { { var __bjson = new JSONObject();  test.DemoE2.SaveJsonDemoE2(_e, __bjson); __cjson["null"] = __bjson; } } _json["k9"] = __cjson; }
        }
        {

            if (k15 == null) { throw new System.ArgumentNullException(); }
            { var __cjson = new JSONArray(); foreach(var _e in k15) { { var __bjson = new JSONObject();  test.DemoDynamic.SaveJsonDemoDynamic(_e, __bjson); __cjson["null"] = __bjson; } } _json["k15"] = __cjson; }
        }
    }

    public static ExcelFromJson LoadJsonExcelFromJson(SimpleJSON.JSONNode _json)
    {
        ExcelFromJson obj = new test.ExcelFromJson();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonExcelFromJson(ExcelFromJson _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    public int x4;

    public bool x1;

    public long x5;

    public float x6;

    public string s1;

    public string s2;

    public string t1;

    public test.DemoType1 x12;

    public test.DemoEnum x13;

    public test.DemoDynamic x14;

    public int[] k1;

    public System.Collections.Generic.Dictionary<int, int> k8;

    public System.Collections.Generic.List<test.DemoE2> k9;

    public test.DemoDynamic[] k15;

}

}
