
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import (
    "demo/luban"
)

import "errors"

type TestTestMap struct {
    Id int32
    X1 map[int32]int32
    X2 map[int64]int32
    X3 map[string]int32
    X4 map[int32]int32
}

const TypeId_TestTestMap = -543227410

func (*TestTestMap) GetTypeId() int32 {
    return -543227410
}

func NewTestTestMap(_buf *luban.ByteBuf) (_v *TestTestMap, err error) {
    _v = &TestTestMap{}
    { if _v.Id, err = _buf.ReadInt(); err != nil { err = errors.New("error"); return } }
    { _v.X1 = make(map[int32]int32); var _n_ int; if _n_, err = _buf.ReadSize(); err != nil { err = errors.New("error"); return}; for i := 0 ; i < _n_ ; i++ { var _key_ int32; { if _key_, err = _buf.ReadInt(); err != nil { err = errors.New("error"); return } }; var _value_ int32; { if _value_, err = _buf.ReadInt(); err != nil { err = errors.New("error"); return } }; _v.X1[_key_] = _value_} }
    { _v.X2 = make(map[int64]int32); var _n_ int; if _n_, err = _buf.ReadSize(); err != nil { err = errors.New("error"); return}; for i := 0 ; i < _n_ ; i++ { var _key_ int64; { if _key_, err = _buf.ReadLong(); err != nil { err = errors.New("error"); return } }; var _value_ int32; { if _value_, err = _buf.ReadInt(); err != nil { err = errors.New("error"); return } }; _v.X2[_key_] = _value_} }
    { _v.X3 = make(map[string]int32); var _n_ int; if _n_, err = _buf.ReadSize(); err != nil { err = errors.New("error"); return}; for i := 0 ; i < _n_ ; i++ { var _key_ string; { if _key_, err = _buf.ReadString(); err != nil { err = errors.New("error"); return } }; var _value_ int32; { if _value_, err = _buf.ReadInt(); err != nil { err = errors.New("error"); return } }; _v.X3[_key_] = _value_} }
    { _v.X4 = make(map[int32]int32); var _n_ int; if _n_, err = _buf.ReadSize(); err != nil { err = errors.New("error"); return}; for i := 0 ; i < _n_ ; i++ { var _key_ int32; { if _key_, err = _buf.ReadInt(); err != nil { err = errors.New("error"); return } }; var _value_ int32; { if _value_, err = _buf.ReadInt(); err != nil { err = errors.New("error"); return } }; _v.X4[_key_] = _value_} }
    return
}

