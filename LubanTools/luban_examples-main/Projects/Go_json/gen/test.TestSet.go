
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import "errors"

type TestTestSet struct {
    Id int32
    X0 string
    X1 []int32
    X2 []int64
    X3 []string
    X4 []int32
}

const TypeId_TestTestSet = -543221516

func (*TestTestSet) GetTypeId() int32 {
    return -543221516
}

func NewTestTestSet(_buf map[string]interface{}) (_v *TestTestSet, err error) {
    _v = &TestTestSet{}
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["id"].(float64); !_ok_ { err = errors.New("id error"); return }; _v.Id = int32(_tempNum_) }
    { var _ok_ bool; if _v.X0, _ok_ = _buf["x0"].(string); !_ok_ { err = errors.New("x0 error"); return } }
     {
                    var _arr_ []interface{}
                    var _ok_ bool
                    if _arr_, _ok_ = _buf["x1"].([]interface{}); !_ok_ { err = errors.New("x1 error"); return }
    
                    _v.X1 = make([]int32, 0, len(_arr_))
                    
                    for _, _e_ := range _arr_ {
                        var _list_v_ int32
                        { var _ok_ bool; var _x_ float64; if _x_, _ok_ = _e_.(float64); !_ok_ { err = errors.New("_list_v_ error"); return }; _list_v_ = int32(_x_) }
                        _v.X1 = append(_v.X1, _list_v_)
                    }
                }

     {
                    var _arr_ []interface{}
                    var _ok_ bool
                    if _arr_, _ok_ = _buf["x2"].([]interface{}); !_ok_ { err = errors.New("x2 error"); return }
    
                    _v.X2 = make([]int64, 0, len(_arr_))
                    
                    for _, _e_ := range _arr_ {
                        var _list_v_ int64
                        { var _ok_ bool; var _x_ float64; if _x_, _ok_ = _e_.(float64); !_ok_ { err = errors.New("_list_v_ error"); return }; _list_v_ = int64(_x_) }
                        _v.X2 = append(_v.X2, _list_v_)
                    }
                }

     {
                    var _arr_ []interface{}
                    var _ok_ bool
                    if _arr_, _ok_ = _buf["x3"].([]interface{}); !_ok_ { err = errors.New("x3 error"); return }
    
                    _v.X3 = make([]string, 0, len(_arr_))
                    
                    for _, _e_ := range _arr_ {
                        var _list_v_ string
                        {  if _list_v_, _ok_ = _e_.(string); !_ok_ { err = errors.New("_list_v_ error"); return } }
                        _v.X3 = append(_v.X3, _list_v_)
                    }
                }

     {
                    var _arr_ []interface{}
                    var _ok_ bool
                    if _arr_, _ok_ = _buf["x4"].([]interface{}); !_ok_ { err = errors.New("x4 error"); return }
    
                    _v.X4 = make([]int32, 0, len(_arr_))
                    
                    for _, _e_ := range _arr_ {
                        var _list_v_ int32
                        { var _ok_ bool; var _x_ float64; if _x_, _ok_ = _e_.(float64); !_ok_ { err = errors.New("_list_v_ error"); return }; _list_v_ = int32(_x_) }
                        _v.X4 = append(_v.X4, _list_v_)
                    }
                }

    return
}

