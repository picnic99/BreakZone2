
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import "errors"

type TestExcelFromJsonMultiRow struct {
    Id int32
    X int32
    Items []*TestTestRow
}

const TypeId_TestExcelFromJsonMultiRow = 715335694

func (*TestExcelFromJsonMultiRow) GetTypeId() int32 {
    return 715335694
}

func NewTestExcelFromJsonMultiRow(_buf map[string]interface{}) (_v *TestExcelFromJsonMultiRow, err error) {
    _v = &TestExcelFromJsonMultiRow{}
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["id"].(float64); !_ok_ { err = errors.New("id error"); return }; _v.Id = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["x"].(float64); !_ok_ { err = errors.New("x error"); return }; _v.X = int32(_tempNum_) }
     {
                    var _arr_ []interface{}
                    var _ok_ bool
                    if _arr_, _ok_ = _buf["items"].([]interface{}); !_ok_ { err = errors.New("items error"); return }
    
                    _v.Items = make([]*TestTestRow, 0, len(_arr_))
                    
                    for _, _e_ := range _arr_ {
                        var _list_v_ *TestTestRow
                        { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = _e_.(map[string]interface{}); !_ok_ { err = errors.New("_list_v_ error"); return }; if _list_v_, err = NewTestTestRow(_x_); err != nil { return } }
                        _v.Items = append(_v.Items, _list_v_)
                    }
                }

    return
}

