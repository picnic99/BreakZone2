
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import "errors"

type AiUeLoop struct {
    Id int32
    NodeName string
    FlowAbortMode int32
    NumLoops int32
    InfiniteLoop bool
    InfiniteLoopTimeoutTime float32
}

const TypeId_AiUeLoop = -513308166

func (*AiUeLoop) GetTypeId() int32 {
    return -513308166
}

func NewAiUeLoop(_buf map[string]interface{}) (_v *AiUeLoop, err error) {
    _v = &AiUeLoop{}
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["id"].(float64); !_ok_ { err = errors.New("id error"); return }; _v.Id = int32(_tempNum_) }
    { var _ok_ bool; if _v.NodeName, _ok_ = _buf["node_name"].(string); !_ok_ { err = errors.New("node_name error"); return } }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["flow_abort_mode"].(float64); !_ok_ { err = errors.New("flow_abort_mode error"); return }; _v.FlowAbortMode = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["num_loops"].(float64); !_ok_ { err = errors.New("num_loops error"); return }; _v.NumLoops = int32(_tempNum_) }
    { var _ok_ bool; if _v.InfiniteLoop, _ok_ = _buf["infinite_loop"].(bool); !_ok_ { err = errors.New("infinite_loop error"); return } }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["infinite_loop_timeout_time"].(float64); !_ok_ { err = errors.New("infinite_loop_timeout_time error"); return }; _v.InfiniteLoopTimeoutTime = float32(_tempNum_) }
    return
}

