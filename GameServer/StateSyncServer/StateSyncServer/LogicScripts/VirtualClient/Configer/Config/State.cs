
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace cfg
{
public sealed partial class State : Luban.BeanBase
{
    public State(JSONNode _buf) 
    {
        { if(!_buf["id"].IsNumber) { throw new SerializationException(); }  Id = _buf["id"]; }
        { if(!_buf["type"].IsString) { throw new SerializationException(); }  Type = _buf["type"]; }
        { if(!_buf["name"].IsString) { throw new SerializationException(); }  Name = _buf["name"]; }
        { if(!_buf["animKey"].IsString) { throw new SerializationException(); }  AnimKey = _buf["animKey"]; }
        { if(!_buf["exitType"].IsNumber) { throw new SerializationException(); }  ExitType = (StateExitType)_buf["exitType"].AsInt; }
        { if(!_buf["order"].IsNumber) { throw new SerializationException(); }  Order = _buf["order"]; }
        { var __json0 = _buf["mutexState"]; if(!__json0.IsArray) { throw new SerializationException(); } MutexState = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  MutexState.Add(__v0); }   }
        { var __json0 = _buf["exceptSkills"]; if(!__json0.IsArray) { throw new SerializationException(); } ExceptSkills = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  ExceptSkills.Add(__v0); }   }
        { if(!_buf["isSkill"].IsBoolean) { throw new SerializationException(); }  IsSkill = _buf["isSkill"]; }
    }

    public static State DeserializeState(JSONNode _buf)
    {
        return new State(_buf);
    }

    public readonly int Id;
    /// <summary>
    /// 状态类型
    /// </summary>
    public readonly string Type;
    /// <summary>
    /// 状态名称
    /// </summary>
    public readonly string Name;
    /// <summary>
    /// 状态动画
    /// </summary>
    public readonly string AnimKey;
    /// <summary>
    /// 状态退出类型
    /// </summary>
    public readonly StateExitType ExitType;
    /// <summary>
    /// 状态优先级
    /// </summary>
    public readonly int Order;
    /// <summary>
    /// 互斥状态
    /// </summary>
    public readonly System.Collections.Generic.List<int> MutexState;
    /// <summary>
    /// 例外技能,如在跳跃状态下可以切换到技能状态，但是只有特点技能 临时处理吧 因为不同角色不同技能
    /// </summary>
    public readonly System.Collections.Generic.List<int> ExceptSkills;
    /// <summary>
    /// 是否属于技能
    /// </summary>
    public readonly bool IsSkill;
   
    public const int __ID__ = 80204913;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
        
        
        
        
        
        
        
        
        
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + Id + ","
        + "type:" + Type + ","
        + "name:" + Name + ","
        + "animKey:" + AnimKey + ","
        + "exitType:" + ExitType + ","
        + "order:" + Order + ","
        + "mutexState:" + Luban.StringUtil.CollectionToString(MutexState) + ","
        + "exceptSkills:" + Luban.StringUtil.CollectionToString(ExceptSkills) + ","
        + "isSkill:" + IsSkill + ","
        + "}";
    }
}

}
