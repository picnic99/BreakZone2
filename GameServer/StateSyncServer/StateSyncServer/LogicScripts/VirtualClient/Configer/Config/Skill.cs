
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using System.Text.Json;


namespace cfg
{
public sealed partial class Skill : Luban.BeanBase
{
    public Skill(JsonElement _buf) 
    {
        Id = _buf.GetProperty("id").GetInt32();
        Name = _buf.GetProperty("name").GetString();
        Cd = _buf.GetProperty("cd").GetInt32();
        IsShow = _buf.GetProperty("isShow").GetBoolean();
        Desc = _buf.GetProperty("desc").GetString();
        Icon = _buf.GetProperty("icon").GetString();
        { var __json0 = _buf.GetProperty("tags"); Tags = new System.Collections.Generic.List<SkillTags>(__json0.GetArrayLength()); foreach(JsonElement __e0 in __json0.EnumerateArray()) { SkillTags __v0;  __v0 = (SkillTags)__e0.GetInt32();  Tags.Add(__v0); }   }
        IsInstantSkill = _buf.GetProperty("IsInstantSkill").GetBoolean();
        IsOnly = _buf.GetProperty("IsOnly").GetBoolean();
        { var __json0 = _buf.GetProperty("mutexState"); MutexState = new System.Collections.Generic.List<int>(__json0.GetArrayLength()); foreach(JsonElement __e0 in __json0.EnumerateArray()) { int __v0;  __v0 = __e0.GetInt32();  MutexState.Add(__v0); }   }
        { var __json0 = _buf.GetProperty("backBreakSkills"); BackBreakSkills = new System.Collections.Generic.List<int>(__json0.GetArrayLength()); foreach(JsonElement __e0 in __json0.EnumerateArray()) { int __v0;  __v0 = __e0.GetInt32();  BackBreakSkills.Add(__v0); }   }
        ValueRules = _buf.GetProperty("valueRules").GetString();
        { var __json0 = _buf.GetProperty("animKeys"); AnimKeys = new System.Collections.Generic.List<string>(__json0.GetArrayLength()); foreach(JsonElement __e0 in __json0.EnumerateArray()) { string __v0;  __v0 = __e0.GetString();  AnimKeys.Add(__v0); }   }
        Sounds = _buf.GetProperty("sounds").GetString();
        Effects = _buf.GetProperty("effects").GetString();
        ExtraParams = _buf.GetProperty("extraParams").GetString();
    }

    public static Skill DeserializeSkill(JsonElement _buf)
    {
        return new Skill(_buf);
    }

    public readonly int Id;
    /// <summary>
    /// 技能名称
    /// </summary>
    public readonly string Name;
    /// <summary>
    /// 冷却时间
    /// </summary>
    public readonly int Cd;
    /// <summary>
    /// 是否展示
    /// </summary>
    public readonly bool IsShow;
    /// <summary>
    /// 描述
    /// </summary>
    public readonly string Desc;
    /// <summary>
    /// 技能icon
    /// </summary>
    public readonly string Icon;
    /// <summary>
    /// 技能标签 需要枚举
    /// </summary>
    public readonly System.Collections.Generic.List<SkillTags> Tags;
    /// <summary>
    /// 是否瞬间施放
    /// </summary>
    public readonly bool IsInstantSkill;
    /// <summary>
    /// 是否是唯一技能，玩家身上只允许存在一个技能
    /// </summary>
    public readonly bool IsOnly;
    /// <summary>
    /// 覆盖互斥状态
    /// </summary>
    public readonly System.Collections.Generic.List<int> MutexState;
    /// <summary>
    /// 可以打断该技能后摇的技能id列表
    /// </summary>
    public readonly System.Collections.Generic.List<int> BackBreakSkills;
    /// <summary>
    /// 数值
    /// </summary>
    public readonly string ValueRules;
    /// <summary>
    /// 动画key
    /// </summary>
    public readonly System.Collections.Generic.List<string> AnimKeys;
    /// <summary>
    /// 音频
    /// </summary>
    public readonly string Sounds;
    /// <summary>
    /// 特效
    /// </summary>
    public readonly string Effects;
    /// <summary>
    /// 扩展参数
    /// </summary>
    public readonly string ExtraParams;
   
    public const int __ID__ = 79944241;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + Id + ","
        + "name:" + Name + ","
        + "cd:" + Cd + ","
        + "isShow:" + IsShow + ","
        + "desc:" + Desc + ","
        + "icon:" + Icon + ","
        + "tags:" + Luban.StringUtil.CollectionToString(Tags) + ","
        + "IsInstantSkill:" + IsInstantSkill + ","
        + "IsOnly:" + IsOnly + ","
        + "mutexState:" + Luban.StringUtil.CollectionToString(MutexState) + ","
        + "backBreakSkills:" + Luban.StringUtil.CollectionToString(BackBreakSkills) + ","
        + "valueRules:" + ValueRules + ","
        + "animKeys:" + Luban.StringUtil.CollectionToString(AnimKeys) + ","
        + "sounds:" + Sounds + ","
        + "effects:" + Effects + ","
        + "extraParams:" + ExtraParams + ","
        + "}";
    }
}

}
